from bs4 import BeautifulSoup
import requests
import pandas as pd
# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.support import expected_conditions as EC


class TestTreedata():
    def setup_method(self):#, method):
        self.driver = webdriver.Firefox()
        self.vars = {}
        # self.TreeHTMLData = list()

    def teardown_method(self):#, method):
        self.driver.quit()

    def scroll_shim(self, object):
        x = object.location['x']
        y = object.location['y']
        scroll_by_coord = 'window.scrollTo(%s,%s);' % (
            x,
            y
        )
        scroll_nav_out_of_way = 'window.scrollBy(0, -120);'
        self.driver.execute_script(scroll_by_coord)
        self.driver.execute_script(scroll_nav_out_of_way)
    def test_treedata(self, TreeName):
        # for TreeName in TreeNameList:
        # WebDriverWait(self.driver, 20).until(
        #     EC.visibility_of_all_elements_located((By.CSS_SELECTOR, "#all a[target='_self']")))
        # WebDriverWait(self.driver, 10).until(EC.presence_of_element_located((By.ID, "search-input")))
        # actions = ActionChains(self.driver)
        self.driver.get("https://www.ebben.nl/en/treeebb/")
        WebDriverWait(self.driver, 200).until(EC.presence_of_element_located((By.ID, "search-input")))
        # self.driver.find_element(By.TAG_NAME,'body').send_keys(Keys.CONTROL + Keys.HOME)
        # WebDriverWait(self.driver, 2)
        # element1 = (
        self.driver.find_element(By.ID, "search-input").click()
        # self.scroll_shim(element1)
        # actions = ActionChains(self.driver)
        # actions.scroll_to_element(element1).perform()
        # element1.click()
        self.driver.find_element(By.ID, "search-input").send_keys(TreeName)#"Fraxinus excelsior \'Westhof\'s Glorie\'")
        self.driver.find_element(By.CLASS_NAME,"search-go").click()
        # self.driver.find_element(By.CSS_SELECTOR, "span:nth-child(1) > .recht").click()
        # self.driver.find_element(By.CSS_SELECTOR, ".details > .recht").click()
        WebDriverWait(self.driver, 200).until(EC.element_to_be_clickable((By.XPATH, '//*[contains(@title, "' + TreeName + '")]')))
        element2 = self.driver.find_element(By.XPATH, '//*[contains(@title, "' + TreeName + '")]')
        # ActionChains(self.driver).scroll_to_element(element2).perform()
        self.driver.get(element2.get_attribute('href'))
        # self.driver.find_element(By.XPATH, '//*[contains(@title, "' + TreeName + '")]').click()
        # self.driver.find_element(By.CLASS_NAME,"plant").click()
        # self.driver.find_element(By.XPATH,"//div[contains(@class, 'plant')]").click()
        WebDriverWait(self.driver, 200).until(EC.element_to_be_clickable((By.XPATH, "//div[contains(@class, 'body plant-body cf')]")))
        html_data = self.driver.find_element(By.XPATH,"//div[contains(@class, 'body plant-body cf')]")
        page_source = self.driver.page_source
        # self.TreeHTMLData.append(html_data)
        # WebDriverWait(self.driver, 2)
        return html_data, page_source